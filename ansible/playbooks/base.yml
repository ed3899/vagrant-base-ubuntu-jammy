- name: Update and upgrade
  hosts: all
  become: true
  tasks:
    - name: Update and upgrade
      ansible.builtin.apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 # one day
  tags:
  - always

- name: Base dirs
  hosts: all
  become: true
  tasks:
    - name: Ensure downloads dir exists
      ansible.builtin.file:
        path: /downloads
        state: directory
        owner: root
        group: root
        mode: 0777
    - name: Ensure ansible_state dir exists
      ansible.builtin.file:
        path: /ansible_state
        state: directory
        owner: root
        group: root
        mode: 0777
  tags:
  - always

- name: Set UNIX aliases
  hosts: all
  become: true
  tasks:
    - name: Add aliases to .profile
      ansible.builtin.blockinfile:
        path: /home/vagrant/.profile
        block: |
          ## Profile aliases
          # Show hidden files #
          alias l.='ls -d .* --color=auto'
          ## a quick way to get out of current directory
          alias ..='cd ..'
          alias ...='cd ../../../'
          alias ....='cd ../../../../'
          alias .....='cd ../../../../'
          alias .4='cd ../../../../'
          alias .5='cd ../../../../..'
          ## handy short cuts
          alias h='history'
          alias j='jobs -l'
          alias path='echo -e ${PATH//:/\\n}'
          alias now='date +"%T"'
          alias nowtime=now
          alias nowdate='date +"%d-%m-%Y"'
          ## Stop after sending count ECHO_REQUEST packets #
          alias ping='ping -c 5'
          ## Do not wait interval 1 second, go fast #
          alias fastping='ping -c 100 -s.2'
          ## Use netstat command to quickly list all TCP/UDP port on the server:
          alias ports='netstat -tulanp'
          ## pass options to free ##
          alias meminfo='free -m -l -t'
          ## get top process eating memory
          alias psmem='ps auxf | sort -nr -k 4'
          alias psmem10='ps auxf | sort -nr -k 4 | head -10'
          ## get top process eating cpu ##
          alias pscpu='ps auxf | sort -nr -k 3'
          alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
          ## Get server cpu info ##
          ## older system use /proc/cpuinfo ##
          alias cpuinfo='less /proc/cpuinfo'
          ## get GPU ram on desktop / laptop##
          alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'
          alias wget='wget -c'
  tags:
    - always

- name: Common utilities
  hosts: all
  become: true
  tasks:
    - name: Update the cache. Make sure general packages are present
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - net-tools
        - build-essential
        - procps
        - file
        - bash-completion
        - tree
        - netcat
  tags:
  - always

- name: Ansible
  hosts: all
  become: true
  tasks:
    - name: Add Ansible repo
      ansible.builtin.apt_repository:
        repo: ppa:ansible/ansible
    - name: Ensure software-properties-common is present
      ansible.builtin.apt:
        name: software-properties-common
        update_cache: yes
  tags:
  - always

- name: Git
  ansible.builtin.import_playbook: ./vc/git.yml
  tags:
  - git

- name: GitHub
  hosts: all
  vars_files:
    - "../secrets/main.yml"
  become: true
  tasks:
    - name: Generate key pair
      community.crypto.openssh_keypair:
        path: /home/vagrant/.ssh/github
        type: ed25519
        owner: vagrant
      register: github_ssh_key_pair
    - name: Add public key to GitHub
      community.general.github_key:
        name: access_key_for_local_vagrant_dev
        token: "{{ github.tokens.personal_access_token_classic }}"
        pubkey: "{{ github_ssh_key_pair.public_key }}"
      no_log: true
      register: github_pubkey_added
      when: github_ssh_key_pair is succeeded
    - name: Authorize GitHub public key
      ansible.posix.authorized_key:
        user: vagrant
        key: "{{ lookup('file', '/home/vagrant/.ssh/github.pub') }}"
      when: github_pubkey_added is succeeded
    - name: Add host to ssh_config
      community.general.ssh_config:
        host: github.com
        hostname: github.com
        user: vagrant
        identity_file: "{{ github_ssh_key_pair.filename }}"
      when: github_pubkey_added is succeeded
  tags:
  - github

- name: Homebrew
  hosts: all
  become: true
  tasks:
    - name: Install homebrew
      become: false
      ansible.builtin.shell: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      args:
        creates: /home/linuxbrew
    - name: Ensure homebrew path is added to .profile
      ansible.builtin.lineinfile:
        path: /home/vagrant/.profile
        line: eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    - name: Add gcc brew
      become: false
      community.general.homebrew:
        path: /home/linuxbrew/.linuxbrew/bin
        name: gcc
  tags:
  - brew

- name: GUI
  hosts: all
  become: true
  tasks:
    - name: Update the cache. Make sure dependencies needed for GUI are installed.
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - xfce4
        - xfce4-goodies
        - virtualbox-guest-utils
        - virtualbox-guest-x11
    - name: Allow anybody to launch the GUI
      ansible.builtin.replace:
        path: /etc/X11/Xwrapper.config
        regexp: allowed_users=.*$
        replace: allowed_users=anybody
    - name: Setup for VirtualBox GUI client
      ansible.builtin.shell: |
        if !(test -e /ansible_state/vbox_settings_added.ansible)
        then
          (VBoxClient-all || (VBoxClient --clipboard && VBoxClient --draganddrop && VBoxClient --display && VBoxClient --checkhostversion && VBoxClient --seamless)) && touch vbox_settings_added.ansible
        fi
      args:
        chdir: /ansible_state
        creates: vbox_settings_added.ansible
  tags:
  - gui

- name: Docker
  hosts: all
  become: true
  tasks:
    - name: Install Docker dependencies
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - curl
        - ca-certificates
        - gnupg
    - name: Add Docker's GPG apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
    - name: Add Docker repo to apt (Ubuntu Jammy)
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
      when: ansible_distribution == "Ubuntu" and ansible_distribution_release == "jammy"
    - name: Install Docker components
      ansible.builtin.apt:
        name: "{{ item }}"
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
    - name: Ensure docker is active
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes
    - name: Ensure Docker group exists
      user:
        name: vagrant
        groups: docker
        append: yes
  tags:
  - docker

- name: AWS CLI
  hosts: all
  vars_files:
    - "../secrets/main.yml"
  become: true
  tasks:
    - name: Get /usr/local/aws-cli stats
      ansible.builtin.stat:
        path: /usr/local/aws-cli
      register: aws_cli_dir
    - name: Make sure AWS dependencies are present
      ansible.builtin.apt:
        name: "{{ item }}"
      loop:
        - groff
        - less
        - unzip
    - name: Download AWS Cli
      ansible.builtin.shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      args:
        chdir: /downloads
        creates: awscliv2.zip
    - name: Install AWS Cli
      ansible.builtin.shell: unzip -u awscliv2.zip && ./aws/install
      args:
        chdir: /downloads
        creates: /downloads/aws/install
      when: not aws_cli_dir.stat.exists
      register: awscli_installed
    - name: Ensure AWS credentials are present
      ansible.builtin.lineinfile:
        path: /home/vagrant/.aws/credentials
        create: true
        owner: vagrant
        group: vagrant
        mode: "0777"
        line: "{{ item }}"
      loop:
        - "[default]"
        - "aws_access_key_id={{ aws.access_key_id }}"
        - "aws_secret_access_key={{ aws.secret_access_key }}"
      no_log: true
      when: awscli_installed is succeeded
    - name: Ensure AWS config is present
      ansible.builtin.lineinfile:
        path: /home/vagrant/.aws/config
        create: true
        owner: vagrant
        group: vagrant
        mode: "0777"
        line: "{{ item }}"
      loop:
        - "[default]"
        - "region={{ aws.region }}"
        - "output={{ aws.output }}"
      when: awscli_installed is succeeded
  tags:
  - aws

- name: K8s tools
  hosts: all
  become: true
  tasks:
    - name: Install kubectl
      community.general.snap:
        name:
          - kubectl
        classic: true
    - name: Add kubectl autocompletion to bash
      ansible.builtin.shell: |
        kubectl completion bash | sudo tee kubectl > /dev/null
        chmod a+r kubectl
      args:
        creates: /etc/bash_completion.d/kubectl
        chdir: /etc/bash_completion.d
  tags:
  - k8s

- name: Minikube
  hosts: all
  become: true
  tasks:
    - name: Get stats of /usr/local/bin/minikube
      ansible.builtin.stat:
        path: /usr/local/bin/minikube
      register: minikube_dir
    - name: Download minikube binary
      ansible.builtin.shell: curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
      args:
        creates: /downloads/minikube-linux-amd64
        chdir: /downloads
    - name: Install minukube
      ansible.builtin.shell: install minikube-linux-amd64 /usr/local/bin/minikube
      args:
        chdir: /downloads
      when: not minikube_dir.stat.exists
  tags:
  - minikube

- name: Starship
  hosts: all
  become: true
  tasks:
    - name: Ensure FiraCode package is present
      ansible.builtin.apt:
        name: fonts-firacode
        update_cache: yes
    - name: Ensure starship brew is present
      become: false
      community.general.homebrew:
        name: starship
    - name: Ensure starship script is present on .profile
      ansible.builtin.lineinfile:
        path: /home/vagrant/.profile
        line: eval "$(starship init bash)"
  tags:
  - starship

- name: Rust
  ansible.builtin.import_playbook: ./programming_languages/rust.yml
  tags:
  - rust

- name: Go
  ansible.builtin.import_playbook: ./programming_languages/go.yml
  tags:
  - go

- name: PostgreSQL
  ansible.builtin.import_playbook: ./dbs/postgresql.yml
  tags:
  - pg