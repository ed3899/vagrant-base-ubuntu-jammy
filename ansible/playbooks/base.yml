- name: Update and upgrade
  hosts: all
  become: true
  tasks:
    - name: Update and upgrade
      ansible.builtin.apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 # one day
  tags:
  - always

- name: Base dirs
  hosts: all
  become: true
  tasks:
    - name: Ensure downloads dir exists
      ansible.builtin.file:
        path: /downloads
        state: directory
        owner: root
        group: root
        mode: 0777
    - name: Ensure ansible_state dir exists
      ansible.builtin.file:
        path: /ansible_state
        state: directory
        owner: root
        group: root
        mode: 0777
  tags:
  - always

- name: Set UNIX aliases
  hosts: all
  become: true
  tasks:
    - name: Add aliases to .profile
      ansible.builtin.blockinfile:
        path: /home/vagrant/.profile
        block: |
          ## Profile aliases
          # Show hidden files #
          alias l.='ls -d .* --color=auto'
          ## a quick way to get out of current directory
          alias ..='cd ..'
          alias ...='cd ../../../'
          alias ....='cd ../../../../'
          alias .....='cd ../../../../'
          alias .4='cd ../../../../'
          alias .5='cd ../../../../..'
          ## handy short cuts
          alias h='history'
          alias j='jobs -l'
          alias path='echo -e ${PATH//:/\\n}'
          alias now='date +"%T"'
          alias nowtime=now
          alias nowdate='date +"%d-%m-%Y"'
          ## Stop after sending count ECHO_REQUEST packets #
          alias ping='ping -c 5'
          ## Do not wait interval 1 second, go fast #
          alias fastping='ping -c 100 -s.2'
          ## Use netstat command to quickly list all TCP/UDP port on the server:
          alias ports='netstat -tulanp'
          ## pass options to free ##
          alias meminfo='free -m -l -t'
          ## get top process eating memory
          alias psmem='ps auxf | sort -nr -k 4'
          alias psmem10='ps auxf | sort -nr -k 4 | head -10'
          ## get top process eating cpu ##
          alias pscpu='ps auxf | sort -nr -k 3'
          alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
          ## Get server cpu info ##
          ## older system use /proc/cpuinfo ##
          alias cpuinfo='less /proc/cpuinfo'
          ## get GPU ram on desktop / laptop##
          alias gpumeminfo='grep -i --color memory /var/log/Xorg.0.log'
          alias wget='wget -c'
  tags:
    - always

- name: Common utilities
  hosts: all
  become: true
  tasks:
    - name: Update the cache. Make sure general packages are present
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - net-tools
        - build-essential
        - procps
        - file
        - bash-completion
        - tree
  tags:
  - always

- name: Ansible
  hosts: all
  become: true
  tasks:
    - name: Add Ansible repo
      ansible.builtin.apt_repository:
        repo: ppa:ansible/ansible
    - name: Ensure software-properties-common is present
      ansible.builtin.apt:
        name: software-properties-common
        update_cache: yes
  tags:
  - always

- name: Git
  hosts: all
  vars_files:
    - "../vars/main.yml"
  become: true
  tasks:
    - name: Add Git repository
      ansible.builtin.apt_repository:
        repo: ppa:git-core/ppa
    - name: Install git
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - git
    - name: Git config
      community.general.git_config:
        name: "{{ item.name }}"
        scope: "{{ item.scope }}"
        value: "{{ item.value }}"
      loop:
        - {
            name: "user.name",
            scope: "system",
            value: "{{ git.username }}"
          }
        - {
            name: "user.email",
            scope: "system",
            value: "{{ git.email }}"
          }
        - {
            name: "core.editor",
            scope: "system",
            value: "vi"
          }
        - {
            name: "alias.gaa",
            scope: "system",
            value: "!git config --get-regexp alias"
          }
          # Do you often run a git status command? I do! Use the following git alias to have a shortcut for it:
        - {
            name: "alias.s",
            scope: "system",
            value: "status"
          }
          # Moving back and forth between git branches is also something we often do. Let’s shorten that!:
          # git co feat/add-popup
        - {
            name: "alias.co",
            scope: "system",
            value: "checkout"
          }
          # Create a new branch and switch to it
        - {
            name: "alias.cob",
            scope: "system",
            value: "checkout -b"
          }
          # Delete a branch
        - {
            name: "alias.del",
            scope: "system",
            value: "branch -d"
          }
          # Forcibly delete branch
        - {
            name: "alias.delfrc",
            scope: "system",
            value: "branch -D"
          }
          # List all local branches
        - {
            name: "alias.br",
            scope: "system",
            value: "branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate"
          }
          # List all local branches with detailed commits
        - {
            name: "alias.brc",
            scope: "system",
            value: "show-branch --color --sha1-name"
          }
          # List all branches
        - {
            name: "alias.bra",
            scope: "system",
            value: "branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate -a"
          }
          # List all branches with detailed commits
        - {
            name: "alias.brac",
            scope: "system",
            value: "show-branch --color --sha1-name -a"
          }
        - {
            name: "alias.save",
            scope: "system",
            value: "!git add -A && git commit"
          }
          # To allow for a faster and more productive git workflow of saving commit status points, the following git alias is a quick one to add all git unstaged files into the staging area with a generic commit message.
        - {
            name: "alias.qsave",
            scope: "system",
            value: "!git add -A && git commit -m 'chore: savepoint'"
          }
          # Amend last commit
        - {
            name: "alias.cma",
            scope: "system",
            value: "commit --amend"
          }
          # The following alias will roll all of your commit changes back into the local unstaged area, so you can make modifications and add them to the staging area (often referred to as the index).
        - {
            name: "alias.undo",
            scope: "system",
            value: "reset HEAD~1 --mixed"
          }
          # It resets all staged changes (those that you added with the git add command).
        - {
            name: "alias.res",
            scope: "system",
            value: "!git reset --hard"
          }
          # Push changes to upstream
          # If you’re working on the same branch name as the one you wish to push changes to, then we can alias the remote branch name as HEAD.
        - {
            name: "alias.done",
            scope: "system",
            value: "!git push origin HEAD"
          }
        - {
            name: "alias.donefl",
            scope: "system",
            value: "!git push origin HEAD --force-with-lease"
          }
          # Git log
        - {
            name: "alias.lg",
            scope: "system",
            value: "!git log --pretty=format:\"%C(magenta)%h%Creset -%C(red)%d%Creset %s %C(dim green)(%cr) [%an]\" --abbrev-commit -30 --stat"
          }
          # Git log merge conflict
          # Shows only commits related to files that produced a conflict
          # Displays < if the commit was from the “left” side of the merge (“our” version, the one you started with), or > if the commit was from the “right” side of the merge (“their” version, the one you’re merging in
          # Can also provide the file name to be more specific
          # git log --merge --left-right -p hello
        - {
            name: "alias.lgm",
            scope: "system",
            value: "!git log --pretty -30 --stat --merge --left-right -p"
          }
          # Display graph topology with all branches
        - {
            name: "alias.graph",
            scope: "system",
            value: "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)' --all --full-history"
          }
          # Display orphaned commits
        - {
            name: "alias.orphanl",
            scope: "system",
            value: "!git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -c1-7`"
          }
          # Display history of a file
          # git log --oneline --follow FILE_NAME
          # git log --oneline -- OLD_FILE_NAME
        - {
            name: "alias.fileh",
            scope: "system",
            value: "!git log --oneline --follow"
          }
          # Lists all configured remote repositories
        - {
            name: "alias.rv",
            scope: "system",
            value: "remote -v"
          }
          # Use this alias to display file1 differences between two commits:
          # git dv 33559c5 ca1494d file1
        - {
            name: "alias.dv",
            scope: "system",
            value: "difftool -t vimdiff -y"
          }
          # The sl alias makes it easier to list all user configurations
        - {
            name: "alias.sl",
            scope: "system",
            value: "config --system -l"
          }
          # Use this alias to search for specific strings in your commits:
          # git se test2
        - {
            name: "alias.se",
            scope: "system",
            value: "!git rev-list --all | xargs git grep -F"
          }
          # Pull origin
        - {
            name: "alias.po",
            scope: "system",
            value: "pull origin"
          }
          # Pull origin rebase
        - {
            name: "alias.por",
            scope: "system",
            value: "pull origin --rebase"
          }
          # Stash and save
          # git sts "name"
        - {
            name: "alias.sts",
            scope: "system",
            value: "stash save"
          }
          # Stash list
        - {
            name: "alias.stls",
            scope: "system",
            value: "stash list"
          }
          # Stash pop
        - {
            name: "alias.stp",
            scope: "system",
            value: "stash pop"
          }
          # Git rebase interactive
        - {
            name: "alias.rebi",
            scope: "system",
            value: "rebase --interactive"
          }
  tags:
  - git

- name: GitHub
  hosts: all
  vars_files:
    - "../secrets/main.yml"
  become: true
  tasks:
    - name: Generate key pair
      community.crypto.openssh_keypair:
        path: /home/vagrant/.ssh/github
        type: ed25519
        owner: vagrant
      register: github_ssh_key_pair
    - name: Add public key to GitHub
      community.general.github_key:
        name: access_key_for_local_vagrant_dev
        token: "{{ github.tokens.personal_access_token_classic }}"
        pubkey: "{{ github_ssh_key_pair.public_key }}"
      no_log: true
      register: github_pubkey_added
      when: github_ssh_key_pair is succeeded
    - name: Authorize GitHub public key
      ansible.posix.authorized_key:
        user: vagrant
        key: "{{ lookup('file', '/home/vagrant/.ssh/github.pub') }}"
      when: github_pubkey_added is succeeded
    - name: Add host to ssh_config
      community.general.ssh_config:
        host: github.com
        hostname: github.com
        user: vagrant
        identity_file: "{{ github_ssh_key_pair.filename }}"
      when: github_pubkey_added is succeeded
  tags:
  - github

- name: Homebrew
  hosts: all
  become: true
  tasks:
    - name: Install homebrew
      become: false
      ansible.builtin.shell: |
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      args:
        creates: /home/linuxbrew
    - name: Ensure homebrew path is added to .profile
      ansible.builtin.lineinfile:
        path: /home/vagrant/.profile
        line: eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    - name: Add gcc brew
      become: false
      community.general.homebrew:
        path: /home/linuxbrew/.linuxbrew/bin
        name: gcc
  tags:
  - brew

- name: GUI
  hosts: all
  become: true
  tasks:
    - name: Update the cache. Make sure dependencies needed for GUI are installed.
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - xfce4
        - xfce4-goodies
        - virtualbox-guest-utils
        - virtualbox-guest-x11
    - name: Allow anybody to launch the GUI
      ansible.builtin.replace:
        path: /etc/X11/Xwrapper.config
        regexp: allowed_users=.*$
        replace: allowed_users=anybody
    - name: Setup for VirtualBox GUI client
      ansible.builtin.shell: |
        if !(test -e /ansible_state/vbox_settings_added.ansible)
        then
          (VBoxClient-all || (VBoxClient --clipboard && VBoxClient --draganddrop && VBoxClient --display && VBoxClient --checkhostversion && VBoxClient --seamless)) && touch vbox_settings_added.ansible
        fi
      args:
        chdir: /ansible_state
        creates: vbox_settings_added.ansible
  tags:
  - gui

- name: Docker
  hosts: all
  become: true
  tasks:
    - name: Install Docker dependencies
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - curl
        - ca-certificates
        - gnupg
    - name: Add Docker's GPG apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
    - name: Add Docker repo to apt (Ubuntu Jammy)
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
      when: ansible_distribution == "Ubuntu" and ansible_distribution_release == "jammy"
    - name: Install Docker components
      ansible.builtin.apt:
        name: "{{ item }}"
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
    - name: Ensure docker is active
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes
    - name: Ensure Docker group exists
      user:
        name: vagrant
        groups: docker
        append: yes
  tags:
  - docker

- name: AWS CLI
  hosts: all
  vars_files:
    - "../secrets/main.yml"
  become: true
  tasks:
    - name: Get /usr/local/aws-cli stats
      ansible.builtin.stat:
        path: /usr/local/aws-cli
      register: aws_cli_dir
    - name: Make sure AWS dependencies are present
      ansible.builtin.apt:
        name: "{{ item }}"
      loop:
        - groff
        - less
        - unzip
    - name: Download AWS Cli
      ansible.builtin.shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      args:
        chdir: /downloads
        creates: awscliv2.zip
    - name: Install AWS Cli
      ansible.builtin.shell: unzip -u awscliv2.zip && ./aws/install
      args:
        chdir: /downloads
        creates: /downloads/aws/install
      when: not aws_cli_dir.stat.exists
      register: awscli_installed
    - name: Ensure AWS credentials are present
      ansible.builtin.lineinfile:
        path: /home/vagrant/.aws/credentials
        create: true
        owner: vagrant
        group: vagrant
        mode: "0777"
        line: "{{ item }}"
      loop:
        - "[default]"
        - "aws_access_key_id={{ aws.access_key_id }}"
        - "aws_secret_access_key={{ aws.secret_access_key }}"
      no_log: true
      when: awscli_installed is succeeded
    - name: Ensure AWS config is present
      ansible.builtin.lineinfile:
        path: /home/vagrant/.aws/config
        create: true
        owner: vagrant
        group: vagrant
        mode: "0777"
        line: "{{ item }}"
      loop:
        - "[default]"
        - "region={{ aws.region }}"
        - "output={{ aws.output }}"
      when: awscli_installed is succeeded
  tags:
  - aws

- name: K8s tools
  hosts: all
  become: true
  tasks:
    - name: Install kubectl
      community.general.snap:
        name:
          - kubectl
        classic: true
    - name: Add kubectl autocompletion to bash
      ansible.builtin.shell: |
        kubectl completion bash | sudo tee kubectl > /dev/null
        chmod a+r kubectl
      args:
        creates: /etc/bash_completion.d/kubectl
        chdir: /etc/bash_completion.d
  tags:
  - k8s

- name: Minikube
  hosts: all
  become: true
  tasks:
    - name: Get stats of /usr/local/bin/minikube
      ansible.builtin.stat:
        path: /usr/local/bin/minikube
      register: minikube_dir
    - name: Download minikube binary
      ansible.builtin.shell: curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
      args:
        creates: /downloads/minikube-linux-amd64
        chdir: /downloads
    - name: Install minukube
      ansible.builtin.shell: install minikube-linux-amd64 /usr/local/bin/minikube
      args:
        chdir: /downloads
      when: not minikube_dir.stat.exists
  tags:
  - minikube

- name: Starship
  hosts: all
  become: true
  tasks:
    - name: Ensure FiraCode package is present
      ansible.builtin.apt:
        name: fonts-firacode
        update_cache: yes
    - name: Ensure starship brew is present
      become: false
      community.general.homebrew:
        name: starship
    - name: Ensure starship script is present on .profile
      ansible.builtin.lineinfile:
        path: /home/vagrant/.profile
        line: eval "$(starship init bash)"
  tags:
  - starship

- name: Rust
  ansible.builtin.import_playbook: rust.yml
  tags:
  - rust