- name: Python
  hosts: all
  become: true
  vars:
  # Check and select your available versions with:
  # sudo update-alternatives --config python3
  #
  # Ensure the state is set to present as not to interfere
  # with the default needed version for ansible provisioning
  # The version automatically changes back to the factory version
  # after every provisioning
  #
  # When you and a new version make sure to keep descending priority numbers
    python_versions:
      python3.11: { priority: 2, state: present }
      python3.9: { priority: 1, state: present }
  pre_tasks:
    # For other versions of Ubuntu (e.g. 22.04), you may need the deadsnakes ppa to install some python versions
    - name: Add deadsnakes repo
      ansible.builtin.apt_repository:
        repo: ppa:deadsnakes/ppa
  tasks:
    - name: Install python versions
      ansible.builtin.apt:
        name: "{{ item.key }}"
        update_cache: yes
      loop: "{{ python_versions | dict2items }}"
    - name: Install pipenv dependencies
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - python3-pip
        - python3-venv
    - name: Install setuptools
      ansible.builtin.pip:
        name: setuptools
    # https://packaging.python.org/en/latest/tutorials/managing-dependencies/
    - name: Install pipenv (Package manager)
      become: true
      become_user: vagrant
      ansible.builtin.pip:
        name: pipenv
        extra_args: --user
    - name: Ensure pipenv is on PATH
      ansible.builtin.lineinfile:
        path: /home/vagrant/.profile
        backup: true
        create: true
        line: export PATH=$PATH:/home/vagrant/.local/bin
  post_tasks:
    # There is no fully functional Python version manager for Linux as of now, like pyenv for MacoS or Windows.
    # Most of them are still on experimental support. The best way so far is to use the built-in tools Linux
    # provides us to handle that.
    # To manage python alternatives use the built-in "update-alternatives" command
    # https://tellor.io/blog/how-to-install-python-3-9-and-venv-on-ubuntu/
    - name: Set python3 alternatives
      community.general.alternatives:
        name: python3
        link: /usr/bin/python3
        path: "/usr/bin/{{ item.key }}"
        priority: "{{ item.value.priority }}"
        state: "{{ item.value.state }}"
      loop: "{{ python_versions | dict2items }}"