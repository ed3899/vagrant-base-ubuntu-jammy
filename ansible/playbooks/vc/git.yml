- name: Git
  hosts: all
  vars_files:
    - "../../vars/main.yml"
  become: true
  tasks:
    - name: Add Git repository
      ansible.builtin.apt_repository:
        repo: ppa:git-core/ppa
    - name: Install git
      ansible.builtin.apt:
        name: "{{ item }}"
        update_cache: yes
      loop:
        - git
    - name: Git config
      community.general.git_config:
        name: "{{ item.name }}"
        scope: "{{ item.scope }}"
        value: "{{ item.value }}"
      loop:
        - {
            name: "user.name",
            scope: "system",
            value: "{{ git.username }}"
          }
        - {
            name: "user.email",
            scope: "system",
            value: "{{ git.email }}"
          }
        - {
            name: "core.editor",
            scope: "system",
            value: "vi"
          }
        - {
            name: "alias.gaa",
            scope: "system",
            value: "!git config --get-regexp alias"
          }
          # Do you often run a git status command? I do! Use the following git alias to have a shortcut for it:
        - {
            name: "alias.s",
            scope: "system",
            value: "status"
          }
          # Moving back and forth between git branches is also something we often do. Let’s shorten that!:
          # git co feat/add-popup
        - {
            name: "alias.co",
            scope: "system",
            value: "checkout"
          }
          # Create a new branch and switch to it
        - {
            name: "alias.cob",
            scope: "system",
            value: "checkout -b"
          }
          # Delete a branch
        - {
            name: "alias.del",
            scope: "system",
            value: "branch -d"
          }
          # Forcibly delete branch
        - {
            name: "alias.delfrc",
            scope: "system",
            value: "branch -D"
          }
          # List all local branches
        - {
            name: "alias.br",
            scope: "system",
            value: "branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate"
          }
          # List all local branches with detailed commits
        - {
            name: "alias.brc",
            scope: "system",
            value: "show-branch --color --sha1-name"
          }
          # List all branches
        - {
            name: "alias.bra",
            scope: "system",
            value: "branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate -a"
          }
          # List all branches with detailed commits
        - {
            name: "alias.brac",
            scope: "system",
            value: "show-branch --color --sha1-name -a"
          }
        - {
            name: "alias.save",
            scope: "system",
            value: "!git add -A && git commit"
          }
          # To allow for a faster and more productive git workflow of saving commit status points, the following git alias is a quick one to add all git unstaged files into the staging area with a generic commit message.
        - {
            name: "alias.qsave",
            scope: "system",
            value: "!git add -A && git commit -m 'chore: savepoint'"
          }
          # Amend last commit
        - {
            name: "alias.cma",
            scope: "system",
            value: "commit --amend"
          }
          # The following alias will roll all of your commit changes back into the local unstaged area, so you can make modifications and add them to the staging area (often referred to as the index).
        - {
            name: "alias.undo",
            scope: "system",
            value: "reset HEAD~1 --mixed"
          }
          # It resets all staged changes (those that you added with the git add command).
        - {
            name: "alias.res",
            scope: "system",
            value: "!git reset --hard"
          }
          # Push changes to upstream
          # If you’re working on the same branch name as the one you wish to push changes to, then we can alias the remote branch name as HEAD.
        - {
            name: "alias.done",
            scope: "system",
            value: "!git push origin HEAD"
          }
        - {
            name: "alias.donefl",
            scope: "system",
            value: "!git push origin HEAD --force-with-lease"
          }
          # Git log
        - {
            name: "alias.lg",
            scope: "system",
            value: "!git log --pretty=format:\"%C(magenta)%h%Creset -%C(red)%d%Creset %s %C(dim green)(%cr) [%an]\" --abbrev-commit -30 --stat"
          }
          # Git log merge conflict
          # Shows only commits related to files that produced a conflict
          # Displays < if the commit was from the “left” side of the merge (“our” version, the one you started with), or > if the commit was from the “right” side of the merge (“their” version, the one you’re merging in
          # Can also provide the file name to be more specific
          # git log --merge --left-right -p hello
        - {
            name: "alias.lgm",
            scope: "system",
            value: "!git log --pretty -30 --stat --merge --left-right -p"
          }
          # Display graph topology with all branches
        - {
            name: "alias.graph",
            scope: "system",
            value: "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)' --all --full-history"
          }
          # Display orphaned commits
        - {
            name: "alias.orphanl",
            scope: "system",
            value: "!git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -c1-7`"
          }
          # Display history of a file
          # git log --oneline --follow FILE_NAME
          # git log --oneline -- OLD_FILE_NAME
        - {
            name: "alias.fileh",
            scope: "system",
            value: "!git log --oneline --follow"
          }
          # Lists all configured remote repositories
        - {
            name: "alias.rv",
            scope: "system",
            value: "remote -v"
          }
          # Use this alias to display file1 differences between two commits:
          # git dv 33559c5 ca1494d file1
        - {
            name: "alias.dv",
            scope: "system",
            value: "difftool -t vimdiff -y"
          }
          # The sl alias makes it easier to list all user configurations
        - {
            name: "alias.sl",
            scope: "system",
            value: "config --system -l"
          }
          # Use this alias to search for specific strings in your commits:
          # git se test2
        - {
            name: "alias.se",
            scope: "system",
            value: "!git rev-list --all | xargs git grep -F"
          }
          # Pull origin
        - {
            name: "alias.po",
            scope: "system",
            value: "pull origin"
          }
          # Pull origin rebase
        - {
            name: "alias.por",
            scope: "system",
            value: "pull origin --rebase"
          }
          # Stash and save
          # git sts "name"
        - {
            name: "alias.sts",
            scope: "system",
            value: "stash save"
          }
          # Stash list
        - {
            name: "alias.stls",
            scope: "system",
            value: "stash list"
          }
          # Stash pop
        - {
            name: "alias.stp",
            scope: "system",
            value: "stash pop"
          }
          # Git rebase interactive
        - {
            name: "alias.rebi",
            scope: "system",
            value: "rebase --interactive"
          }
